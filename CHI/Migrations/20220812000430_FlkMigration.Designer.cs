// <auto-generated />
using System;
using CHI.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CHI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220812000430_FlkMigration")]
    partial class FlkMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CHI.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("FullNameExist")
                        .HasColumnType("bit");

                    b.Property<string>("Initials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgeKind")
                        .HasColumnType("int");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<double>("AmountUnpaid")
                        .HasColumnType("float");

                    b.Property<int>("BedDays")
                        .HasColumnType("int");

                    b.Property<int>("BillRegisterCode")
                        .HasColumnType("int");

                    b.Property<long>("CloseCaseCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IdCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaidStatus")
                        .HasColumnType("int");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentPurpose")
                        .HasColumnType("int");

                    b.Property<double>("VisitPurpose")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RegisterId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CaseFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CaseFiltersCollectionBaseId")
                        .HasColumnType("int");

                    b.Property<double>("Code")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseFiltersCollectionBaseId");

                    b.ToTable("CaseFilters");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("CaseFiltersCollections");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CaseFiltersCollectionBase");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HexColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCanPlanning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTotal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HexColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgeKind")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MedicId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.IndicatorBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("Indicators");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IndicatorBase");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Medic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FomsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IndicatorId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("ParameterId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.PlanningPermision", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("PlanningPermision");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Ratio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Divider")
                        .HasColumnType("float");

                    b.Property<int?>("IndicatorBaseId")
                        .HasColumnType("int");

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorBaseId");

                    b.ToTable("Ratio");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CasesCount")
                        .HasColumnType("int");

                    b.Property<int>("FlkRejectCasesCount")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStateCasesCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassifierItemId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("ClassifierItemId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.ServiceClassifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceClassifiers");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.ServiceClassifierItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsCaseClosing")
                        .HasColumnType("bit");

                    b.Property<double>("LaborCost")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ServiceClassifierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceClassifierId");

                    b.ToTable("ServiceClassifierItems");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FomsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AttachedPatientsPermision")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicalExaminationsPermision")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReferencesPerimision")
                        .HasColumnType("bit");

                    b.Property<bool>("RegistersPermision")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportPermision")
                        .HasColumnType("bit");

                    b.Property<bool>("SettingsPermision")
                        .HasColumnType("bit");

                    b.Property<string>("Sid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UsersPerimision")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.BedDaysIndicator", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.IndicatorBase");

                    b.HasDiscriminator().HasValue("BedDaysIndicator");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CasesIndicator", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.IndicatorBase");

                    b.HasDiscriminator().HasValue("CasesIndicator");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CostIndicator", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.IndicatorBase");

                    b.HasDiscriminator().HasValue("CostIndicator");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.ExcludingServiceCodeCaseFiltersCollection", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase");

                    b.HasDiscriminator().HasValue("ExcludingServiceCodeCaseFiltersCollection");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.LaborCostIndicator", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.IndicatorBase");

                    b.HasDiscriminator().HasValue("LaborCostIndicator");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.ServiceCodeCaseFiltersCollection", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase");

                    b.HasDiscriminator().HasValue("ServiceCodeCaseFiltersCollection");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.TreatmentPurposeCaseFiltersCollection", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase");

                    b.HasDiscriminator().HasValue("TreatmentPurposeCaseFiltersCollection");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.VisitPurposeCaseFiltersCollection", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase");

                    b.HasDiscriminator().HasValue("VisitPurposeCaseFiltersCollection");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.VisitsIndicator", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.IndicatorBase");

                    b.HasDiscriminator().HasValue("VisitsIndicator");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CasesLaborCostIndicator", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.LaborCostIndicator");

                    b.HasDiscriminator().HasValue("CasesLaborCostIndicator");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.VisitsLaborCostIndicator", b =>
                {
                    b.HasBaseType("CHI.Models.ServiceAccounting.LaborCostIndicator");

                    b.HasDiscriminator().HasValue("VisitsLaborCostIndicator");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Case", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CHI.Models.ServiceAccounting.Register", null)
                        .WithMany("Cases")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CaseFilter", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase", null)
                        .WithMany("Filters")
                        .HasForeignKey("CaseFiltersCollectionBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Component", null)
                        .WithMany("CaseFiltersCollections")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Component", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Component", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Department", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Department", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Employee", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("CHI.Models.ServiceAccounting.Medic", "Medic")
                        .WithMany()
                        .HasForeignKey("MedicId");

                    b.HasOne("CHI.Models.ServiceAccounting.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId");

                    b.Navigation("Department");

                    b.Navigation("Medic");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.IndicatorBase", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Component", "Component")
                        .WithMany("Indicators")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Component");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Parameter", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Department", "Department")
                        .WithMany("Parameters")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("CHI.Models.ServiceAccounting.Employee", "Employee")
                        .WithMany("Parameters")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Plan", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.IndicatorBase", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId");

                    b.HasOne("CHI.Models.ServiceAccounting.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId");

                    b.Navigation("Indicator");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.PlanningPermision", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Department", "Department")
                        .WithMany("PlanningPermisions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CHI.Models.ServiceAccounting.User", "User")
                        .WithMany("PlanningPermisions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Ratio", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.IndicatorBase", null)
                        .WithMany("Ratios")
                        .HasForeignKey("IndicatorBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Service", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.Case", null)
                        .WithMany("Services")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CHI.Models.ServiceAccounting.ServiceClassifierItem", "ClassifierItem")
                        .WithMany()
                        .HasForeignKey("ClassifierItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CHI.Models.ServiceAccounting.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("ClassifierItem");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.ServiceClassifierItem", b =>
                {
                    b.HasOne("CHI.Models.ServiceAccounting.ServiceClassifier", null)
                        .WithMany("ServiceClassifierItems")
                        .HasForeignKey("ServiceClassifierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Case", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.CaseFiltersCollectionBase", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Component", b =>
                {
                    b.Navigation("CaseFiltersCollections");

                    b.Navigation("Childs");

                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Department", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Employees");

                    b.Navigation("Parameters");

                    b.Navigation("PlanningPermisions");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Employee", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.IndicatorBase", b =>
                {
                    b.Navigation("Ratios");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.Register", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.ServiceClassifier", b =>
                {
                    b.Navigation("ServiceClassifierItems");
                });

            modelBuilder.Entity("CHI.Models.ServiceAccounting.User", b =>
                {
                    b.Navigation("PlanningPermisions");
                });
#pragma warning restore 612, 618
        }
    }
}
